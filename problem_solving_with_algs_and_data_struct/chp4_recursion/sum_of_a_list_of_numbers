"""

Exercise: Calculating the Sum of a List of Numbers
--------------------------------------------------

I. Iterative summation:
We use an iterative function that computes the sum. The function uses an accumulator variable (theSum) to compute a
running total of all the numbers in the list by starting with 0 and adding each number in the list.

II. Recursive summation:
The sum of the list numList is:  sumList = the first element numList[0] + the sum of the numbers (numList[1:]


Questions:
---------
Q-9: How many recursive calls are made when computing the sum of the list [2,4,6,8,10]?

(A) 6
(B) 5
(C) 4 <-- the first recursive call passes the list [4,6,8,10], the second [6,8,10] and so on until [10].
(D) 3

sum ([2,4,6,8,10]) = 2 + sum([4,6,8,10] = 6 + sum([6, 8, 10]) = 12 + sum([8, 10]) = 20 + sum([10]) = 20


Q-10: Suppose you are going to write a recusive function to calculate the factorial of a number.
fact(n) returns n * n-1 * n-2 * ..., where factorial(0) = 1. What would be the most appropriate base case?

(A) n == 0
(B) n == 1
(C) n >= 0
(D) n <= 1 <-- most efficient & keeps a program from crashing if you try to compute the factorial of a negative number.

"""


def iterative_sum(num_list):
    the_sum = 0
    for num in num_list:
        the_sum += num
    return the_sum


def recursive_sum(num_list):
    if len(num_list) == 1:
        return num_list[0]
    else:
        return num_list[0] + recursive_sum(num_list[1:])


the_list = [1, 3, 5, 7, 9]
print(iterative_sum(the_list))
print(recursive_sum(the_list))